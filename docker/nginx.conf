# referencess:
# - https://geekflare.com/nginx-production-configuration/
# - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
user root root;
worker_processes 4; # This directive controls the number of workers in Nginx. The value of this directive is set to auto to allow Nginx to determine the number of cores available, disks, server load, and network subsystem. However, you can discover the number of cores by executing the command lscpu on the terminal.
worker_rlimit_nofile 20960; # Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes. Used to increase the limit without restarting the main process.
daemon off; # Determines whether nginx should become a daemon. off because supervisor will manage it.
pid /root/nginx.pid;

http {
	server {
		server_name _;
		listen 80 default_server;
		listen [::]:80 default_server ipv6only=on;
		index index.php;
		root /root/app/public;
		access_log /dev/stdout combined;
		error_log /dev/stderr warn;
		include /etc/nginx/mime.types;
		# default_type application/octet-stream;

		# Anti slow roris
		client_body_timeout 5s;
		client_header_timeout 5s;
		autoindex off; # Disable directory listing

		gzip on;
		gzip_comp_level  2;
		gzip_min_length  1000;
		gzip_types  text/xml text/css text/js;
		gzip_http_version 1.1;
		gzip_vary  on;
		gzip_disable "MSIE [4-6] \.";

		keepalive_timeout  30s;
		keepalive_requests 30;
		send_timeout      30s;

		location / {
			try_files $uri /index.php?q=$uri&$args;
		}
		location ~ \.php$ {

			try_files $uri =404;

			# PHP only, required if PHP was built with --enable-force-cgi-redirect
			fastcgi_param  REDIRECT_STATUS    200;

			fastcgi_pass unix:/root/php8.0-fpm.sock;
			# fastcgi_index index.php;
			# fastcgi_buffers 16 16k;
			# fastcgi_buffer_size 32k;
			# fastcgi_read_timeout 600;
			fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
			fastcgi_param  QUERY_STRING       $query_string;       
			fastcgi_param  REQUEST_METHOD     $request_method;     
			fastcgi_param  CONTENT_TYPE       $content_type;       
			fastcgi_param  CONTENT_LENGTH     $content_length;     
			fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
			fastcgi_param  REQUEST_URI        $request_uri;        
			fastcgi_param  DOCUMENT_URI       $document_uri;       
			fastcgi_param  DOCUMENT_ROOT      $document_root;      
			fastcgi_param  SERVER_PROTOCOL    $server_protocol;    
			fastcgi_param  REQUEST_SCHEME     $scheme;
			fastcgi_param  HTTPS              $https if_not_empty; 
			fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
			fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
			fastcgi_param  REMOTE_ADDR        $remote_addr;
			fastcgi_param  REMOTE_PORT        $remote_port;
			fastcgi_param  REMOTE_USER        $remote_user;
			fastcgi_param  SERVER_ADDR        $server_addr;
			fastcgi_param  SERVER_PORT        $server_port;
			fastcgi_param  SERVER_NAME        $server_name;
		}
		# https://geekflare.com/nginx-production-configuration/
		location ~ ^/(css|download|fonts|img)/ {
			# To utilize operating system resources, set the value of this directive to on. sendfile transfers data between file descriptors within the OS kernel space without sending it to the application buffers. This directive will be used to serve small files.
			sendfile        on;
			#tcp_nopush     on;
			# aoi is unsupported in docker
			# aio      on;
			directio    4m;
			directio_alignment 512;
			open_file_cache max=1000 inactive=30s;
			open_file_cache_valid 30s;
			open_file_cache_min_uses 4;
			open_file_cache_errors on;
		}
	}
}

events {
	worker_connections  1024; # This directive sets the value of the number of simultaneous connection that can be opened by a worker. The default value is 512 but we set it to 1,024 to allow one worker to accept a much simultaneous connection from a client.
	multi_accept on; # This directive allows a worker to accept many connections in the queue at a time. A queue in this context simply means a sequence of data objects waiting to be processed.
	accept_mutex on; # This directive is turned off by default. But because we have configured many workers in Nginx, we need to turn it on as shown in the code above to allow workers to accept new connections one by one.
	accept_mutex_delay  500ms; # This directive determines how long a worker should wait before accepting a new connection. Once the accept_mutex is turned on, a mutex lock is assigned to a worker for a timeframe specified by the accept_mutex_delay . When the timeframe is up, the next worker in line is ready to accept new connections.
	use epoll; # This directive specifies the method to process a connection from the client. In this tutorial, we decided to set the value to epoll because we are working on a Ubuntu platform. The epoll method is the most effective processing method for Linux platforms.
	epoll_events 512; # The value of this directive specifies the number of events Nginx will transfer to the kernel.
}